<!DOCTYPE html>
<html lang="en">

<head>
        <link rel="canonical" href="https://v2rayunode.github.io/news/article-68805.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>React + TypeScript实战（一）设定事件处理函数的参数类型</title>
        <meta name="description" content="首先提出需求，给input框绑定一个change事件，打印输入框中每次输入的内容。 在设定参数类型的时候，首先想到的就是Event类型： type IState = readonly&lt;{    " />
        <link rel="icon" href="/assets/website/img/v2rayunode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="V2rayU Node免费梯子节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2rayunode.github.io/news/article-68805.htm" />
    <meta property="og:site_name" content="V2rayU Node免费梯子节点分享官网" />
    <meta property="og:title" content="React + TypeScript实战（一）设定事件处理函数的参数类型" />
    <meta property="og:image" content="https://v2rayunode.github.io/uploads/20241222-1/d5724d9f45324a2206331adc0791a09b.webp" />
        <meta property="og:release_date" content="2025-03-07T06:34:38" />
    <meta property="og:updated_time" content="2025-03-07T06:34:38" />
        <meta property="og:description" content="首先提出需求，给input框绑定一个change事件，打印输入框中每次输入的内容。 在设定参数类型的时候，首先想到的就是Event类型： type IState = readonly&lt;{    " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="React + TypeScript实战（一）设定事件处理函数的参数类型">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Bootstrap -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/v2rayunode/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="fonts/font-awesome/css/font-awesome.css">
    <!-- Stylesheet
    ================================================== -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/v2rayunode/style.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/v2rayunode/nivo-lightbox/nivo-lightbox.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/v2rayunode/nivo-lightbox/default.css">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H4M01FEXJ2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H4M01FEXJ2');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="page-top" data-page="detail">
        <!-- Navigation
        ==========================================-->
    <nav id="menu" class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button>

                <a class="navbar-brand" href="/">
                                        <span>V2rayU Node</span>
                                    </a>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
    </nav>
    <!-- Header -->
    <header id="header">
        <div class="intro category">
            <div class="overlay">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12 intro-text">
                            <h1>React + TypeScript实战（一）设定事件处理函数的参数类型</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- About Section -->
    <div id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="V2ray X节点订阅官网" data-url="https://v2rayx.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> </h1> <p>首先提出需求，给input框绑定一个change事件，打印输入框中每次输入的内容。</p> <p>在设定参数类型的时候，首先想到的就是<code>Event</code>类型：</p> <pre><code class="prism language-react">type IState = readonly&lt;{     ... }&gt;  class Student extends React.Component&lt;any, IState&gt;{   inputChange = (e: Event) =&gt; {     console.log(((e.target) as HTMLInputElement).value);   }    render(): React.ReactNode {     return &lt;div className="container"&gt;       &lt;div className="box"&gt;         &lt;input type="text" onChange={this.inputChange}/&gt;       &lt;/div&gt;     &lt;/div&gt;   } } </code></pre> <p>但是这样会报错：</p> <pre><code>不能将类型“(e: Event) =&gt; void”分配给类型“ChangeEventHandler&lt;HTMLInputElement&gt;”。 参数“e”和“event” 的类型不兼容。 类型“ChangeEvent&lt;HTMLInputElement&gt;”缺少类型“Event”的以下属性: cancelBubble, composed, returnValue, srcElement 及其他 7 项。ts(2322) index.d.ts(2254, 9): 所需类型来自属性 "onChange"，在此处的 "DetailedHTMLProps&lt;InputHTMLAttributes&lt;HTMLInputElement&gt;, HTMLInputElement&gt;" 类型上声明该属性 </code></pre> <p>从这个报错信息来看，<code>onChange</code>事件需要的似乎是一个这样类型的处理函数<code>ChangeEventHandler&lt;HTMLInputElement&gt;</code></p> <p>现在先引入<code>ChangeEventHandler</code>，看一看它对应的源码：</p> <pre><code class="prism language-ts"><span class="token keyword">type</span> <span class="token class-name">ChangeEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>ChangeEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> </code></pre> <p>这意味着，我们的<code>onChange</code>事件是一个<code>EventHandler</code>，它自带的<code>event</code>参数类型为<code>ChangeEvent&lt;T&gt;</code>，由于这里是一个输入框，所以应该为<code>event</code>设置参数为<code>ChangeEvent&lt;HTMLInputElement&gt;</code>再来试试，成功获取到了输入内容！</p> <pre><code class="prism language-react">type IState = readonly&lt;{     ... }&gt;  class Student extends React.Component&lt;any, IState&gt;{   inputChange = (e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {     console.log((e.target.value));   }    render(): React.ReactNode {     return &lt;div className="container"&gt;       &lt;div className="box"&gt;         &lt;input type="text" onChange={this.inputChange}/&gt;       &lt;/div&gt;     &lt;/div&gt;   } } </code></pre> <p>如果你使用的是hooks写法，也可以这样写，不过这并不是本节的重点：</p> <pre><code class="prism language-ts">inputChange <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">useCallback</span><span class="token generic class-name"><span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ChangeEventHandler<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </code></pre> <p>接下来给扩展一个功能，如果有很多个输入框，是否可以共用同一个<code>onChange</code>方法呢？</p> </h1> <p>比如说，我现在需要多个输入框，分别输入学号、姓名、年龄的信息</p> <p>如果分别给每个输入框绑定不同的事件，那就要写三个相似度非常高的函数，这样不太美观：</p> <pre><code class="prism language-react">import React, { ChangeEvent } from 'react'  type IState = Readonly&lt;{   no: string,   name: string,   age: string }&gt;  class Student extends React.Component&lt;any, IState&gt;{   readonly state: IState = {     no: "",     name: "",     age: "",   	list: []   }      inputChangeNo = (key: string, e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {     // 不同的输入框触发change事件，最后打印的key值不同     console.log(key, e.target.value);   }      inputChangeName = (key: string, e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {     console.log(key, e.target.value);   }      inputChangeAge = (key: string, e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {     console.log(key, e.target.value);   }    render(): React.ReactNode {     return &lt;div className="container"&gt;       &lt;div className="box"&gt;         &lt;input           type="text"           value={this.state.no}           onChange={(e) =&gt; this.inputChangeNo("no", e)}           placeholder="输入学号"         /&gt;         &lt;input           type="text"           value={this.state.name}           onChange={(e) =&gt; this.inputChangeName("name", e)}           placeholder="输入姓名"         /&gt;         &lt;input           type="text"           value={this.state.age}           onChange={(e) =&gt; this.inputChangeAge("age", e)}           placeholder="输入年龄"         /&gt;       &lt;/div&gt;     &lt;/div&gt;   } }  export default Student </code></pre> <p>看起来我们似乎可以执行这样的操作：</p> <pre><code class="prism language-ts"><span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> e<span class="token operator">:</span> ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <p>但是对于<code>key</code>值来说，他是一个<strong>字符串索引类型数据</strong>，所以一定需要给他绑定<strong>对应的类型</strong>。</p> <p>在这个案例中，我们需要用到的属性有：</p> <pre><code class="prism language-ts"><span class="token keyword">type</span> <span class="token class-name">IState</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{<!-- --></span>   no<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>   name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>   age<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>   list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> </code></pre> <p>所以索引对应的类型应该有<code> "no" | "name" | "age "</code>，成功设定！</p> <pre><code class="prism language-react">import React, { ChangeEvent } from 'react'  interface PeopleType{   id: number   name: string   age: string }  interface IState{   [name: string]: string | PeopleType[]   list: PeopleType[]   no: string,   name: string,   age: string }  class People extends React.Component&lt;any, IState&gt;{   readonly state: IState = {     no: "",     name: "",     age: "",     list: []   }    inputChange = &lt;K extends keyof IState&gt;(key: K, e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {     this.setState({       [key]: e.target.value     })   }    render(): React.ReactNode {     return &lt;div className="container"&gt;       &lt;div className="box"&gt;         &lt;input           type="text"           value={this.state.no}           onChange={(e) =&gt; this.inputChange("no", e)}           placeholder="输入学号"         /&gt;         &lt;input           type="text"           value={this.state.name}           onChange={(e) =&gt; this.inputChange("name", e)}           placeholder="输入姓名"         /&gt;         &lt;input           type="text"           value={this.state.age}           onChange={(e) =&gt; this.inputChange("age", e)}           placeholder="输入年龄"         /&gt;       &lt;/div&gt;     &lt;/div&gt;   } }  export default People </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-68174.htm">动物疫苗新规定最新版是什么意思（动物疫苗的使用方法及注意事项）</a></p>
                                        <p>下一个：<a href="/news/article-68806.htm">动物医院上班时间是多久一次（动物医院几点下班）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-51884.htm" title="动物疫苗贵吗现在多少钱一针（动物疫苗打一次管多长时间）">动物疫苗贵吗现在多少钱一针（动物疫苗打一次管多长时间）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-21-free-subscribe-node.htm" title="2月21日每日最新机场订阅→18.2M/S|免费节点Shadowrocket/Clash/V2ray/SSR链接地址分享">2月21日每日最新机场订阅→18.2M/S|免费节点Shadowrocket/Clash/V2ray/SSR链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-55679.htm" title="springboot+layui有关分页问题">springboot+layui有关分页问题</a></li>
                        <li class="py-2"><a href="/news/article-66908.htm" title="天照爱宠动物医院怎么样（一片枫叶的拼音怎么写）">天照爱宠动物医院怎么样（一片枫叶的拼音怎么写）</a></li>
                        <li class="py-2"><a href="/news/article-68174.htm" title="动物疫苗新规定最新版是什么意思（动物疫苗的使用方法及注意事项）">动物疫苗新规定最新版是什么意思（动物疫苗的使用方法及注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-53482.htm" title="宠物医院免费咨询（宠物医生免费咨询）">宠物医院免费咨询（宠物医生免费咨询）</a></li>
                        <li class="py-2"><a href="/news/article-54571.htm" title="Vue3知识点整理 常用Composition API（3）- 生命周期、自定义hook、toRef">Vue3知识点整理 常用Composition API（3）- 生命周期、自定义hook、toRef</a></li>
                        <li class="py-2"><a href="/news/article-63180.htm" title="河南省动物疫苗招标公告 河南省动物疫苗招标公告最新">河南省动物疫苗招标公告 河南省动物疫苗招标公告最新</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-node-share.htm" title="2月19日每日最新机场订阅→19.4M/S|免费节点Shadowrocket/Clash/SSR/V2ray链接地址分享">2月19日每日最新机场订阅→19.4M/S|免费节点Shadowrocket/Clash/SSR/V2ray链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-61990.htm" title="IDEA使用Tomcat部署项目">IDEA使用Tomcat部署项目</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
        <!-- Footer Section -->
    <div id="footer">
        <div class="container text-center">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p>
                <a href="/">V2rayU Node免费梯子节点分享官网</a> 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/jquery.1.11.1.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/bootstrap.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/SmoothScroll.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/nivo-lightbox.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/jqBootstrapValidation.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/contact_me.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/v2rayunode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>